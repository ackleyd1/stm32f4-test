#ifndef SSD1306_H
#define SSD1306_H

#define SDA_PIN 16
#define SCL_PIN 17
#define SSD1306_HEIGHT              64
#define SSD1306_WIDTH               128
#define SSD1306_I2C_ADDR            _u(0x3D)

// 400 is usual, but often these can be overclocked to improve display response.
// Tested at 1000 on both 32 and 84 pixel height devices and it worked.
#define SSD1306_I2C_CLK             400

// commands (see datasheet)
#define SSD1306_SET_MEM_MODE        _u(0x20)
#define SSD1306_SET_COL_ADDR        _u(0x21)
#define SSD1306_SET_PAGE_ADDR       _u(0x22)
#define SSD1306_SET_HORIZ_SCROLL    _u(0x26)
#define SSD1306_SET_SCROLL          _u(0x2E)

#define SSD1306_SET_DISP_START_LINE _u(0x40)

#define SSD1306_SET_CONTRAST        _u(0x81)
#define SSD1306_SET_CHARGE_PUMP     _u(0x8D)

#define SSD1306_SET_SEG_REMAP       _u(0xA0)
#define SSD1306_SET_ENTIRE_ON       _u(0xA4)
#define SSD1306_SET_ALL_ON          _u(0xA5)
#define SSD1306_SET_NORM_DISP       _u(0xA6)
#define SSD1306_SET_INV_DISP        _u(0xA7)
#define SSD1306_SET_MUX_RATIO       _u(0xA8)
#define SSD1306_SET_DISP            _u(0xAE)
#define SSD1306_SET_COM_OUT_DIR     _u(0xC0)
#define SSD1306_SET_COM_OUT_DIR_FLIP _u(0xC0)

#define SSD1306_SET_DISP_OFFSET     _u(0xD3)
#define SSD1306_SET_DISP_CLK_DIV    _u(0xD5)
#define SSD1306_SET_PRECHARGE       _u(0xD9)
#define SSD1306_SET_COM_PIN_CFG     _u(0xDA)
#define SSD1306_SET_VCOM_DESEL      _u(0xDB)

#define SSD1306_PAGE_HEIGHT         _u(8)
#define SSD1306_NUM_PAGES           (SSD1306_HEIGHT / SSD1306_PAGE_HEIGHT)
#define SSD1306_BUF_LEN             (SSD1306_NUM_PAGES * SSD1306_WIDTH)

#define SSD1306_WRITE_MODE         _u(0xFE)
#define SSD1306_READ_MODE          _u(0xFF)


struct render_area {
    uint8_t start_col;
    uint8_t end_col;
    uint8_t start_page;
    uint8_t end_page;

    int buflen;
};

void SSD1306_init();
void calc_render_area_buflen(struct render_area *area);
void SSD1306_send_cmd(uint8_t cmd);
void SSD1306_send_cmd_list(uint8_t *buf, int num);
void SSD1306_send_buf(uint8_t buf[], int buflen);
void render(uint8_t *buf, struct render_area *area);
static void SetPixel(uint8_t *buf, int x,int y, bool on);
void DrawLine(uint8_t *buf, int x0, int y0, int x1, int y1, bool on);
static inline int GetFontIndex(uint8_t ch);
static uint8_t reverse(uint8_t b);
static void FillReversedCache();
static void WriteChar(uint8_t *buf, int16_t x, int16_t y, uint8_t ch);
void WriteString(uint8_t *buf, int16_t x, int16_t y, char *str);

// Vertical bitmaps, A-Z, 0-9. Each is 8 pixels high and wide
// Theses are defined vertically to make them quick to copy to FB

static uint8_t font[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Nothing
0x1e, 0x28, 0x48, 0x88, 0x48, 0x28, 0x1e, 0x00,  //A
0xfe, 0x92, 0x92, 0x92, 0x92, 0x92, 0xfe, 0x00,  //B
0x7e, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00,  //C
0xfe, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00,  //D
0xfe, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x00,  //E
0xfe, 0x90, 0x90, 0x90, 0x90, 0x80, 0x80, 0x00,  //F
0xfe, 0x82, 0x82, 0x82, 0x8a, 0x8a, 0xce, 0x00,  //G
0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x00,  //H
0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,  //I
0x84, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80, 0x00,  //J
0x00, 0xfe, 0x10, 0x10, 0x28, 0x44, 0x82, 0x00,  //K
0xfe, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00,  //L
0xfe, 0x40, 0x20, 0x10, 0x20, 0x40, 0xfe, 0x00,  //M
0xfe, 0x40, 0x20, 0x10, 0x08, 0x04, 0xfe, 0x00,  //N
0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00,  //O
0xfe, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00,  //P
0x7c, 0x82, 0x82, 0x92, 0x8a, 0x86, 0x7e, 0x00,  //Q
0xfe, 0x88, 0x88, 0x88, 0x8c, 0x8a, 0x70, 0x00,  //R
0x62, 0x92, 0x92, 0x92, 0x92, 0x0c, 0x00, 0x00,  //S
0x80, 0x80, 0x80, 0xfe, 0x80, 0x80, 0x80, 0x00,  //T
0xfc, 0x02, 0x02, 0x02, 0x02, 0x02, 0xfc, 0x00,  //U
0xf0, 0x08, 0x04, 0x02, 0x04, 0x08, 0xf0, 0x00,  //V
0xfe, 0x04, 0x08, 0x10, 0x08, 0x04, 0xfe, 0x00,  //W
0x00, 0x82, 0x44, 0x28, 0x28, 0x44, 0x82, 0x00,  //X
0x80, 0x40, 0x20, 0x1e, 0x20, 0x40, 0x80, 0x00,  //Y
0x82, 0x86, 0x9a, 0xa2, 0xc2, 0x82, 0x00, 0x00,  //Z
0x7c, 0x82, 0x82, 0x92, 0x82, 0x82, 0x7c, 0x00,  //0
0x00, 0x00, 0x42, 0xfe, 0x02, 0x00, 0x00, 0x00,  //1
0x0c, 0x92, 0x92, 0x92, 0x92, 0x62, 0x00, 0x00,  //2
0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x6c, 0x00,  //3
0xfc, 0x04, 0x04, 0x1e, 0x04, 0x04, 0x00, 0x00,  //4
0xf2, 0x92, 0x92, 0x92, 0x92, 0x0c, 0x00, 0x00,  //5
0xfc, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0c, 0x00,  //6
0x80, 0x80, 0x80, 0x86, 0x8c, 0xb0, 0xc0, 0x00,  //7
0x6c, 0x92, 0x92, 0x92, 0x92, 0x92, 0x6c, 0x00,  //8
0x60, 0x90, 0x90, 0x90, 0x90, 0x90, 0xfe, 0x00,  //9
};

#endif
